pipeline {
  agent any

  parameters {
    string(name: 'KEEP_VERSIONS', defaultValue: '5', description: 'Number of deployment versions to keep')
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Build') {
      steps {
        sh 'npm install'
      }
    }

    stage('Test') {
      steps {
        sh 'npm run test:ci'
      }
    }

    stage('Deploy to EC2') {
      environment {
        DEPLOY_SERVER = 'newbie@118.69.34.46'
        SSH_PORT = '3334'
        DEPLOY_DIR = '/usr/share/nginx/html/jenkins/tungnguyen'
        PROJECT_NAME = 'web-performance-project1-initial'
      }
      steps {
        withCredentials([sshUserPrivateKey(credentialsId: 'SSH_NEWBIE', keyFileVariable: 'SSH_KEY_FILE')]) {
          sh '''
            set -e

            echo "==> Starting deployment process..."
            echo "==> Server: $DEPLOY_SERVER"
            echo "==> Port: $SSH_PORT"
            echo "==> Deploy directory: $DEPLOY_DIR"

            # Validate SSH key file
            if [[ ! -f "$SSH_KEY_FILE" ]]; then
              echo "❌ SSH key file not found: $SSH_KEY_FILE"
              exit 1
            fi

            # Test SSH connection
            echo "==> Testing SSH connection..."
            if ! ssh -i "$SSH_KEY_FILE" -p $SSH_PORT -o ConnectTimeout=10 -o StrictHostKeyChecking=no $DEPLOY_SERVER "echo 'SSH connection successful'" >/dev/null 2>&1; then
              echo "❌ Cannot connect to server: $DEPLOY_SERVER"
              exit 1
            fi
            echo "✅ SSH connection verified"

            # Change to workspace directory
            echo "==> Change to workspace: $WORKSPACE"
            cd "$WORKSPACE"

            # Create directory on server
            echo "==> Creating directory on server..."
            ssh -i "$SSH_KEY_FILE" -p $SSH_PORT -o StrictHostKeyChecking=no $DEPLOY_SERVER "
              mkdir -p $DEPLOY_DIR
              echo 'Directory created successfully'
            "

            # Generate timestamp for deployment
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            echo "==> Deployment timestamp: $TIMESTAMP"

            # Create deploy directory with timestamp
            echo "==> Creating deploy directory with timestamp on server..."
            ssh -i "$SSH_KEY_FILE" -p $SSH_PORT -o StrictHostKeyChecking=no $DEPLOY_SERVER "
              mkdir -p $DEPLOY_DIR/$PROJECT_NAME/deploy/$TIMESTAMP
              echo 'Deploy directory created successfully: deploy/$TIMESTAMP'
            "

            # Upload index.html to timestamped directory
            echo "==> Uploading index.html to server..."
            scp -i "$SSH_KEY_FILE" -P $SSH_PORT index.html $DEPLOY_SERVER:$DEPLOY_DIR/$PROJECT_NAME/deploy/$TIMESTAMP/
            echo "✅ index.html uploaded successfully"

            # Create symlink to current deployment (Capistrano style)
            echo "==> Creating symlink to current deployment..."
            ssh -i "$SSH_KEY_FILE" -p $SSH_PORT -o StrictHostKeyChecking=no $DEPLOY_SERVER "
              cd $DEPLOY_DIR/$PROJECT_NAME/deploy
              ln -sfn $TIMESTAMP current
              echo 'Symlink created: current -> $TIMESTAMP'
            "

            # Cleanup old deployments (keep only ${KEEP_VERSIONS} latest versions)
            echo "==> Cleaning up old deployments (keeping ${KEEP_VERSIONS} latest versions)..."
            ssh -i "$SSH_KEY_FILE" -p $SSH_PORT -o StrictHostKeyChecking=no $DEPLOY_SERVER "
              cd $DEPLOY_DIR/$PROJECT_NAME/deploy

              echo \"Current directories:\"
              ls -la

              # Cleanup using Ansible-style approach: ls -1t (sort by time, newest first)
              # tail -n +N means skip first (N-1) newest and get the rest (oldest)
              # xargs -r rm -rf removes them (xargs -r means don't run if no input)
              # Exclude 'current' symlink from cleanup
              echo \"Cleaning up old deployments...\"
              KEEP_COUNT=$((KEEP_VERSIONS + 1))
              ls -1t | grep -v '^current$' | tail -n +\$KEEP_COUNT | xargs -r rm -rf

              echo \"✅ Cleanup completed. Kept $KEEP_VERSIONS latest versions.\"
            "

            echo "🎉 Deployment completed successfully!"
          '''
        }
      }
    }
  }
}
